{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFbC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACrB,cAAC,EAAD,CAAyBA,QAASA,GAAvBA,EAAQE,YCJpBK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,qBAAKZ,UAAU,aAAf,SACI,uBACEA,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAWF,QCoCNG,E,kDAtCb,aAAc,IAAD,8BACX,gBASFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SATrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJJ,E,qDAcb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAG1C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGnG,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec1099a9.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.style.css\";\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt=\"moster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)\n","import { divide } from 'lodash';\nimport React from  'react';\nimport \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\"\n\nexport const CardList = (props) => {\n    return(<div className=\"card-list\" >\n        {props.monsters.map(monster => (\n              <Card key={monster.name} monster={monster} />\n            ))}\n        </div>);\n}","import React from 'react';\n\nimport \"./search-box.style.css\";\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <div className=\"search-box\">\n        <input \n          className=\"search\"\n          type=\"search\" \n          placeholder={placeholder} \n          onChange= {handleChange} \n        />\n    </div>\n)","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonster}/>\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}